const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle, MessageFlags } = require('discord.js');

// Kanal ve Rol ID'leri
const STORY_BOT_CHANNEL_ID = '1345536534874558465';
const CHARACTER_STORY_CHANNEL_ID = '1343659559926894722';
const CHARACTER_APPROVED_ROLE_ID = '1343991513994104995';

// Hata kodlarƒ±
const ERROR_CODES = {
    CHANNEL_NOT_FOUND: 'SF001',
    MESSAGE_DELETE_FAILED: 'SF002',
    FORM_CREATE_FAILED: 'SF003',
    MODAL_SHOW_FAILED: 'SF004',
    STORY_SUBMIT_FAILED: 'SF005',
    STORY_APPROVE_FAILED: 'SF006',
    STORY_REJECT_FAILED: 'SF007',
    DM_FAILED: 'SF008'
};

// Hata loglama fonksiyonu
function logError(code, error, context = {}) {
    console.error(`[${code}] Hekay…ô Sistemi X…ôtasƒ±: ${error.message}`, {
        timestamp: new Date().toISOString(),
        code,
        error: error.stack,
        ...context
    });
}

class StoryFormSystem {
    constructor(client) {
        this.client = client;
    }

    // Form mesajƒ±nƒ± olu≈ütur
    async createFormMessage(channel) {
        try {
            console.log('createFormMessage fonksiyonu √ßaƒürƒ±ldƒ±');
            
            const messages = await channel.messages.fetch({ limit: 10 }).catch(error => {
                logError(ERROR_CODES.MESSAGE_DELETE_FAILED, error, {
                    channelId: channel.id
                });
                return new Map();
            });

            const botMessages = messages.filter(msg => 
                msg.author.id === this.client.user.id && 
                msg.embeds.length > 0
            );
            
            if (botMessages.size > 0) {
                console.log(`${botMessages.size} adet eski form mesajƒ± bulundu, siliniyor...`);
                try {
                    await channel.bulkDelete(botMessages).catch(error => {
                        logError(ERROR_CODES.MESSAGE_DELETE_FAILED, error, {
                            channelId: channel.id,
                            messageCount: botMessages.size
                        });
                    });
                } catch (error) {
                    for (const [_, message] of botMessages) {
                        await message.delete().catch(() => {});
                    }
                }
            }
            
            const embed = new EmbedBuilder()
                .setColor('#5865F2')
                .setTitle('Whitelist M√ºraciet Formasƒ±')
                .setDescription('Bu form GCA uygulamasƒ±na g√∂nd…ôril…ôc…ôk. ≈ûifr…ôl…ôrini v…ô ya dig…ôr h…ôssas bilgil…ôrini payla≈ümadƒ±ƒüƒ±ndan …ômin ol.')
                .setThumbnail('https://media.discordapp.net/attachments/1334683202861793280/1334683202861793280/gca.gif');
            
            const button = new ButtonBuilder()
                .setCustomId('submit_story_form')
                .setLabel('G√∂nd…ôr')
                .setEmoji('üìù')
                .setStyle(ButtonStyle.Primary);
            
            const row = new ActionRowBuilder().addComponents(button);
            
            const sentMessage = await channel.send({
                embeds: [embed],
                components: [row]
            }).catch(error => {
                logError(ERROR_CODES.FORM_CREATE_FAILED, error, {
                    channelId: channel.id
                });
                throw error;
            });
            
            console.log('Form mesajƒ± ba≈üarƒ±yla olu≈üturuldu:', sentMessage.id);
            return sentMessage;
        } catch (error) {
            logError(ERROR_CODES.FORM_CREATE_FAILED, error, {
                channelId: channel?.id
            });
            throw error;
        }
    }

    // Form modalƒ±nƒ± g√∂ster
    async showStoryForm(interaction) {
        try {
            // Etkile≈üim t√ºr√ºn√º kontrol et
            if (!interaction.isButton()) {
                throw new Error('Ge√ßersiz etkile≈üim t√ºr√º');
            }

            const modal = new ModalBuilder()
                .setCustomId('story_form_submit')
                .setTitle('Whitelist M√ºraciet Formasƒ±');

            const icNameInput = new TextInputBuilder()
                .setCustomId('ic_name')
                .setLabel('IC (KARAKTERƒ∞Nƒ∞Zƒ∞N) AD SOYADI')
                .setPlaceholder('M…ôs…ôl…ôn: John Doe')
                .setStyle(TextInputStyle.Short)
                .setRequired(true)
                .setMinLength(1)
                .setMaxLength(50);

            const birthInfoInput = new TextInputBuilder()
                .setCustomId('birth_info')
                .setLabel('DOƒûUM TARƒ∞Xƒ∞, Mƒ∞LLƒ∞Y∆èTƒ∞ V∆è DOƒûULDUƒûU YER')
                .setPlaceholder('M…ôs…ôl…ôn: 15.03.1990 | Az…ôrbaycan | Bakƒ±')
                .setStyle(TextInputStyle.Short)
                .setRequired(true)
                .setMinLength(1)
                .setMaxLength(100);

            const characterStoryInput = new TextInputBuilder()
                .setCustomId('character_story')
                .setLabel('KARAKTER HEKAY∆èSƒ∞ (1200-2000 Sƒ∞MVOL)')
                .setPlaceholder('Karakterinizin ke√ßmi≈üi, h…ôyat t…ôcr√ºb…ôsi v…ô ≈ü…ôxsiyy…ôti haqqƒ±nda …ôtraflƒ± m…ôlumat')
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(true)
                .setMinLength(1200)
                .setMaxLength(2000);

            const connectionsInput = new TextInputBuilder()
                .setCustomId('connections')
                .setLabel('LEGAL V∆è ƒ∞LLEGAL BAƒûLANTILAR (500 Sƒ∞MVOL)')
                .setPlaceholder('Karakterinizin legal v…ô illegal …ôlaq…ôl…ôri haqqƒ±nda m…ôlumat')
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(true)
                .setMinLength(1)
                .setMaxLength(500);

            const rows = [
                new ActionRowBuilder().addComponents(icNameInput),
                new ActionRowBuilder().addComponents(birthInfoInput),
                new ActionRowBuilder().addComponents(characterStoryInput),
                new ActionRowBuilder().addComponents(connectionsInput)
            ];

            modal.addComponents(...rows);

            // Modal'ƒ± g√∂ster
            await interaction.showModal(modal).catch(error => {
                logError(ERROR_CODES.MODAL_SHOW_FAILED, error, {
                    userId: interaction.user.id
                });
                throw error;
            });

        } catch (error) {
            logError(ERROR_CODES.MODAL_SHOW_FAILED, error, {
                userId: interaction.user.id
            });
            
            try {
                if (!interaction.replied && !interaction.deferred) {
                    await interaction.reply({
                        content: `‚ùå [${ERROR_CODES.MODAL_SHOW_FAILED}] Bir x…ôta ba≈ü verdi. Z…ôhm…ôt olmasa daha sonra yenid…ôn c…ôhd edin.`,
                        ephemeral: true
                    });
                }
            } catch (err) {
                logError(ERROR_CODES.MODAL_SHOW_FAILED, err, {
                    context: 'error_reply_failed',
                    userId: interaction.user.id
                });
            }
        }
    }

    // Modal submit i≈üleyicisi
    async handleStorySubmit(interaction) {
        try {
            if (!interaction.isModalSubmit()) {
                throw new Error('Ge√ßersiz etkile≈üim t√ºr√º');
            }

            const icName = interaction.fields.getTextInputValue('ic_name');
            const birthInfo = interaction.fields.getTextInputValue('birth_info');
            const characterStory = interaction.fields.getTextInputValue('character_story');
            const connections = interaction.fields.getTextInputValue('connections');

            const storyChannel = await this.client.channels.fetch(CHARACTER_STORY_CHANNEL_ID).catch(error => {
                logError(ERROR_CODES.CHANNEL_NOT_FOUND, error, {
                    channelId: CHARACTER_STORY_CHANNEL_ID
                });
                throw error;
            });

            if (!storyChannel) {
                throw new Error('Hikaye kanalƒ± bulunamadƒ±');
            }

            const embed = new EmbedBuilder()
                .setColor('#5865F2')
                .setTitle('üìù Yeni Whitelist M√ºraci…ôti')
                .setDescription(`M√ºraci…ôt ed…ôn: <@${interaction.user.id}>`)
                .addFields(
                    {
                        name: 'üë§ IC Ad Soyad',
                        value: icName
                    },
                    {
                        name: 'üìÖ Doƒüum m…ôlumatlarƒ±',
                        value: birthInfo
                    },
                    {
                        name: 'üìñ Karakter hekay…ôsi (Hiss…ô 1)',
                        value: characterStory.slice(0, 1024)
                    }
                );

            if (characterStory.length > 1024) {
                embed.addFields({
                    name: 'üìñ Karakter hekay…ôsi (Hiss…ô 2)',
                    value: characterStory.slice(1024)
                });
            }

            embed.addFields({
                name: 'ü§ù ∆èlaq…ôl…ôr',
                value: connections
            })
            .setFooter({ text: `M√ºraciat ID: ${interaction.user.id} ‚Ä¢ ${new Date().toLocaleString('az-AZ')}` });

            const buttons = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`approve_story_${interaction.user.id}`)
                        .setLabel('T…ôsdiq Et')
                        .setStyle(ButtonStyle.Success),
                    new ButtonBuilder()
                        .setCustomId(`reject_story_${interaction.user.id}`)
                        .setLabel('R…ôdd Et')
                        .setStyle(ButtonStyle.Danger)
                );

            await storyChannel.send({
                embeds: [embed],
                components: [buttons]
            }).catch(error => {
                logError(ERROR_CODES.STORY_SUBMIT_FAILED, error, {
                    userId: interaction.user.id
                });
                throw error;
            });

            await interaction.editReply({
                content: '‚úÖ Formunuz uƒüurla g√∂nd…ôrildi!',
                ephemeral: true
            });

        } catch (error) {
            logError(ERROR_CODES.STORY_SUBMIT_FAILED, error, {
                userId: interaction.user.id
            });

            const errorMessage = '‚ùå Bir x…ôta ba≈ü verdi. Z…ôhm…ôt olmasa daha sonra yenid…ôn c…ôhd edin.';
            
            try {
                if (!interaction.replied && !interaction.deferred) {
                    await interaction.reply({
                        content: errorMessage,
                        ephemeral: true
                    });
                } else {
                    await interaction.editReply({
                        content: errorMessage,
                        ephemeral: true
                    });
                }
            } catch (err) {
                logError(ERROR_CODES.STORY_SUBMIT_FAILED, err, {
                    context: 'error_reply_failed',
                    userId: interaction.user.id
                });
            }
        }
    }

    // Hikaye onaylama i≈üleyicisi
    async handleStoryApprove(interaction) {
        try {
            const userId = interaction.customId.split('_')[2];
            const user = await this.client.users.fetch(userId);

            if (!user) {
                throw new Error('Kullanƒ±cƒ± bulunamadƒ±');
            }

            const embed = EmbedBuilder.from(interaction.message.embeds[0])
                .setColor('#00FF00')
                .setTitle('‚úÖ Whitelist M√ºraci…ôti T…ôsdiql…ôndi');

            await interaction.message.edit({
                embeds: [embed],
                components: []
            });

            try {
                await user.send('‚úÖ Whitelist m√ºraci…ôtiniz t…ôsdiql…ôndi! Z…ôhm…ôt olmasa !kayit …ômrini istifad…ô ed…ôr…ôk qeydiyyatdan ke√ßin.');
            } catch (dmError) {
                logError(ERROR_CODES.DM_FAILED, dmError, {
                    userId: user.id
                });
            }

            await interaction.editReply({
                content: `‚úÖ <@${userId}> istifad…ô√ßisinin whitelist m√ºraci…ôti t…ôsdiql…ôndi.`,
                ephemeral: true
            });

        } catch (error) {
            logError(ERROR_CODES.STORY_APPROVE_FAILED, error, {
                userId: interaction.user.id
            });

            const errorMessage = '‚ùå Bir x…ôta ba≈ü verdi. Z…ôhm…ôt olmasa daha sonra yenid…ôn c…ôhd edin.';
            
            if (!interaction.replied && !interaction.deferred) {
                await interaction.reply({
                    content: errorMessage,
                    ephemeral: true
                });
            } else {
                await interaction.editReply({
                    content: errorMessage,
                    ephemeral: true
                });
            }
        }
    }

    // Hikaye reddetme modalƒ±nƒ± g√∂ster
    async showRejectModal(interaction) {
        try {
            if (!interaction.isButton()) {
                throw new Error('Ge√ßersiz etkile≈üim t√ºr√º');
            }

            const { hasPermission } = require('../../utils/permissions');
            if (!hasPermission(interaction.member)) {
                await interaction.reply({
                    content: '‚ùå Bu …ôm…ôliyyat √º√ß√ºn admin s…ôlahiyy…ôtiniz yoxdur!',
                    ephemeral: true
                });
                return;
            }

            const userId = interaction.customId.split('_')[2];
            const modal = new ModalBuilder()
                .setCustomId(`reject_reason_${userId}`)
                .setTitle('R…ôdd Etm…ô S…ôb…ôbi');

            const reasonInput = new TextInputBuilder()
                .setCustomId('reject_reason')
                .setLabel('R…ôdd etm…ô s…ôb…ôbini yazƒ±n')
                .setStyle(TextInputStyle.Paragraph)
                .setPlaceholder('Hekay…ônin r…ôdd edilm…ô s…ôb…ôbini buraya yazƒ±n...')
                .setRequired(true)
                .setMinLength(10)
                .setMaxLength(1000);

            const firstActionRow = new ActionRowBuilder().addComponents(reasonInput);
            modal.addComponents(firstActionRow);

            await interaction.showModal(modal);

        } catch (error) {
            logError(ERROR_CODES.STORY_REJECT_FAILED, error, {
                userId: interaction.user.id
            });

            const errorMessage = '‚ùå Bir x…ôta ba≈ü verdi. Z…ôhm…ôt olmasa daha sonra yenid…ôn c…ôhd edin.';
            
            if (!interaction.replied && !interaction.deferred) {
                await interaction.reply({
                    content: errorMessage,
                    ephemeral: true
                });
            } else {
                await interaction.editReply({
                    content: errorMessage,
                    ephemeral: true
                });
            }
        }
    }

    // Hikaye reddetme i≈üleyicisi
    async handleStoryReject(interaction) {
        try {
            const userId = interaction.customId.split('_')[2];
            const reason = interaction.fields.getTextInputValue('reject_reason');
            const user = await this.client.users.fetch(userId);

            if (!user) {
                throw new Error('Kullanƒ±cƒ± bulunamadƒ±');
            }

            const embed = EmbedBuilder.from(interaction.message.embeds[0])
                .setColor('#FF0000')
                .setTitle('‚ùå Whitelist M√ºraci…ôti R…ôdd Edildi')
                .addFields({
                    name: 'üìù R…ôdd Edilm…ô S…ôb…ôbi',
                    value: reason
                });

            await interaction.message.edit({
                embeds: [embed],
                components: []
            });

            try {
                await user.send(`‚ùå Whitelist m√ºraci…ôtiniz r…ôdd edildi.\nüìù S…ôb…ôb: ${reason}`);
            } catch (dmError) {
                logError(ERROR_CODES.DM_FAILED, dmError, {
                    userId: user.id
                });
            }

            await interaction.editReply({
                content: `‚ùå <@${userId}> istifad…ô√ßisinin whitelist m√ºraci…ôti r…ôdd edildi.`,
                ephemeral: true
            });

        } catch (error) {
            logError(ERROR_CODES.STORY_REJECT_FAILED, error, {
                userId: interaction.user.id
            });

            const errorMessage = '‚ùå Bir x…ôta ba≈ü verdi. Z…ôhm…ôt olmasa daha sonra yenid…ôn c…ôhd edin.';
            
            if (!interaction.replied && !interaction.deferred) {
                await interaction.reply({
                    content: errorMessage,
                    ephemeral: true
                });
            } else {
                await interaction.editReply({
                    content: errorMessage,
                    ephemeral: true
                });
            }
        }
    }
}

module.exports = StoryFormSystem; 
